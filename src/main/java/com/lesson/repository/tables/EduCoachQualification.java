/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduCoachQualificationRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 教练资质表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCoachQualification extends TableImpl<EduCoachQualificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_coach_qualification</code>
     */
    public static final EduCoachQualification EDU_COACH_QUALIFICATION = new EduCoachQualification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCoachQualificationRecord> getRecordType() {
        return EduCoachQualificationRecord.class;
    }

    /**
     * The column <code>lesson.edu_coach_qualification.id</code>. 主键ID
     */
    public final TableField<EduCoachQualificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_coach_qualification.coach_id</code>. 教练ID
     */
    public final TableField<EduCoachQualificationRecord, Long> COACH_ID = createField(DSL.name("coach_id"), SQLDataType.BIGINT.nullable(false), this, "教练ID");

    /**
     * The column <code>lesson.edu_coach_qualification.name</code>. 资质名称
     */
    public final TableField<EduCoachQualificationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "资质名称");

    /**
     * The column <code>lesson.edu_coach_qualification.code</code>. 资质编号
     */
    public final TableField<EduCoachQualificationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50), this, "资质编号");

    /**
     * The column <code>lesson.edu_coach_qualification.issue_date</code>. 发证日期
     */
    public final TableField<EduCoachQualificationRecord, LocalDate> ISSUE_DATE = createField(DSL.name("issue_date"), SQLDataType.LOCALDATE, this, "发证日期");

    /**
     * The column <code>lesson.edu_coach_qualification.expire_date</code>. 过期日期
     */
    public final TableField<EduCoachQualificationRecord, LocalDate> EXPIRE_DATE = createField(DSL.name("expire_date"), SQLDataType.LOCALDATE, this, "过期日期");

    /**
     * The column <code>lesson.edu_coach_qualification.issuing_authority</code>. 发证机构
     */
    public final TableField<EduCoachQualificationRecord, String> ISSUING_AUTHORITY = createField(DSL.name("issuing_authority"), SQLDataType.VARCHAR(100), this, "发证机构");

    /**
     * The column <code>lesson.edu_coach_qualification.description</code>. 描述
     */
    public final TableField<EduCoachQualificationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "描述");

    /**
     * The column <code>lesson.edu_coach_qualification.created_at</code>. 创建时间
     */
    public final TableField<EduCoachQualificationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_coach_qualification.updated_at</code>. 更新时间
     */
    public final TableField<EduCoachQualificationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_coach_qualification.created_by</code>. 创建人ID
     */
    public final TableField<EduCoachQualificationRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_coach_qualification.updated_by</code>. 更新人ID
     */
    public final TableField<EduCoachQualificationRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_coach_qualification.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCoachQualificationRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduCoachQualification(Name alias, Table<EduCoachQualificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCoachQualification(Name alias, Table<EduCoachQualificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("教练资质表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_coach_qualification</code> table reference
     */
    public EduCoachQualification(String alias) {
        this(DSL.name(alias), EDU_COACH_QUALIFICATION);
    }

    /**
     * Create an aliased <code>lesson.edu_coach_qualification</code> table reference
     */
    public EduCoachQualification(Name alias) {
        this(alias, EDU_COACH_QUALIFICATION);
    }

    /**
     * Create a <code>lesson.edu_coach_qualification</code> table reference
     */
    public EduCoachQualification() {
        this(DSL.name("edu_coach_qualification"), null);
    }

    public <O extends Record> EduCoachQualification(Table<O> child, ForeignKey<O, EduCoachQualificationRecord> key) {
        super(child, key, EDU_COACH_QUALIFICATION);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COACH_QUALIFICATION_IDX_COACH_ID, Indexes.EDU_COACH_QUALIFICATION_IDX_CREATED_AT);
    }

    @Override
    public Identity<EduCoachQualificationRecord, Long> getIdentity() {
        return (Identity<EduCoachQualificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCoachQualificationRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COACH_QUALIFICATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCoachQualificationRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCoachQualificationRecord>>asList(Keys.KEY_EDU_COACH_QUALIFICATION_PRIMARY);
    }

    @Override
    public EduCoachQualification as(String alias) {
        return new EduCoachQualification(DSL.name(alias), this);
    }

    @Override
    public EduCoachQualification as(Name alias) {
        return new EduCoachQualification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCoachQualification rename(String name) {
        return new EduCoachQualification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCoachQualification rename(Name name) {
        return new EduCoachQualification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, String, LocalDate, LocalDate, String, String, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
