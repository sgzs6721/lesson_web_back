/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduScheduleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 排课表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduSchedule extends TableImpl<EduScheduleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_schedule</code>
     */
    public static final EduSchedule EDU_SCHEDULE = new EduSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduScheduleRecord> getRecordType() {
        return EduScheduleRecord.class;
    }

    /**
     * The column <code>lesson.edu_schedule.id</code>. 主键ID
     */
    public final TableField<EduScheduleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_schedule.class_id</code>. 班级ID
     */
    public final TableField<EduScheduleRecord, Long> CLASS_ID = createField(DSL.name("class_id"), SQLDataType.BIGINT.nullable(false), this, "班级ID");

    /**
     * The column <code>lesson.edu_schedule.classroom_id</code>. 教室ID
     */
    public final TableField<EduScheduleRecord, Long> CLASSROOM_ID = createField(DSL.name("classroom_id"), SQLDataType.BIGINT.nullable(false), this, "教室ID");

    /**
     * The column <code>lesson.edu_schedule.coach_id</code>. 教练ID
     */
    public final TableField<EduScheduleRecord, Long> COACH_ID = createField(DSL.name("coach_id"), SQLDataType.BIGINT.nullable(false), this, "教练ID");

    /**
     * The column <code>lesson.edu_schedule.lesson_id</code>. 课时ID
     */
    public final TableField<EduScheduleRecord, Long> LESSON_ID = createField(DSL.name("lesson_id"), SQLDataType.BIGINT, this, "课时ID");

    /**
     * The column <code>lesson.edu_schedule.start_time</code>. 开始时间
     */
    public final TableField<EduScheduleRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "开始时间");

    /**
     * The column <code>lesson.edu_schedule.end_time</code>. 结束时间
     */
    public final TableField<EduScheduleRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "结束时间");

    /**
     * The column <code>lesson.edu_schedule.title</code>. 课程标题
     */
    public final TableField<EduScheduleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "课程标题");

    /**
     * The column <code>lesson.edu_schedule.description</code>. 课程描述
     */
    public final TableField<EduScheduleRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "课程描述");

    /**
     * The column <code>lesson.edu_schedule.status</code>. 状态：0-已取消，1-正常，2-已结束
     */
    public final TableField<EduScheduleRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-已取消，1-正常，2-已结束");

    /**
     * The column <code>lesson.edu_schedule.created_at</code>. 创建时间
     */
    public final TableField<EduScheduleRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_schedule.updated_at</code>. 更新时间
     */
    public final TableField<EduScheduleRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_schedule.created_by</code>. 创建人ID
     */
    public final TableField<EduScheduleRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_schedule.updated_by</code>. 更新人ID
     */
    public final TableField<EduScheduleRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_schedule.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduScheduleRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduSchedule(Name alias, Table<EduScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduSchedule(Name alias, Table<EduScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("排课表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_schedule</code> table reference
     */
    public EduSchedule(String alias) {
        this(DSL.name(alias), EDU_SCHEDULE);
    }

    /**
     * Create an aliased <code>lesson.edu_schedule</code> table reference
     */
    public EduSchedule(Name alias) {
        this(alias, EDU_SCHEDULE);
    }

    /**
     * Create a <code>lesson.edu_schedule</code> table reference
     */
    public EduSchedule() {
        this(DSL.name("edu_schedule"), null);
    }

    public <O extends Record> EduSchedule(Table<O> child, ForeignKey<O, EduScheduleRecord> key) {
        super(child, key, EDU_SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_SCHEDULE_IDX_CLASS_ID, Indexes.EDU_SCHEDULE_IDX_CLASSROOM_ID, Indexes.EDU_SCHEDULE_IDX_COACH_ID, Indexes.EDU_SCHEDULE_IDX_CREATED_AT, Indexes.EDU_SCHEDULE_IDX_END_TIME, Indexes.EDU_SCHEDULE_IDX_LESSON_ID, Indexes.EDU_SCHEDULE_IDX_START_TIME);
    }

    @Override
    public Identity<EduScheduleRecord, Long> getIdentity() {
        return (Identity<EduScheduleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduScheduleRecord> getPrimaryKey() {
        return Keys.KEY_EDU_SCHEDULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<EduScheduleRecord>>asList(Keys.KEY_EDU_SCHEDULE_PRIMARY);
    }

    @Override
    public EduSchedule as(String alias) {
        return new EduSchedule(DSL.name(alias), this);
    }

    @Override
    public EduSchedule as(Name alias) {
        return new EduSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduSchedule rename(String name) {
        return new EduSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduSchedule rename(Name name) {
        return new EduSchedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, Long, Long, Long, LocalDateTime, LocalDateTime, String, String, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
