/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduAttendanceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 考勤表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduAttendance extends TableImpl<EduAttendanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_attendance</code>
     */
    public static final EduAttendance EDU_ATTENDANCE = new EduAttendance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduAttendanceRecord> getRecordType() {
        return EduAttendanceRecord.class;
    }

    /**
     * The column <code>lesson.edu_attendance.id</code>. 主键ID
     */
    public final TableField<EduAttendanceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_attendance.schedule_id</code>. 排课ID
     */
    public final TableField<EduAttendanceRecord, Long> SCHEDULE_ID = createField(DSL.name("schedule_id"), SQLDataType.BIGINT.nullable(false), this, "排课ID");

    /**
     * The column <code>lesson.edu_attendance.student_id</code>. 学生ID
     */
    public final TableField<EduAttendanceRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "学生ID");

    /**
     * The column <code>lesson.edu_attendance.status</code>. 考勤状态：1-正常，2-迟到，3-早退，4-缺勤，5-请假
     */
    public final TableField<EduAttendanceRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false), this, "考勤状态：1-正常，2-迟到，3-早退，4-缺勤，5-请假");

    /**
     * The column <code>lesson.edu_attendance.check_in_time</code>. 签到时间
     */
    public final TableField<EduAttendanceRecord, LocalDateTime> CHECK_IN_TIME = createField(DSL.name("check_in_time"), SQLDataType.LOCALDATETIME(0), this, "签到时间");

    /**
     * The column <code>lesson.edu_attendance.check_out_time</code>. 签退时间
     */
    public final TableField<EduAttendanceRecord, LocalDateTime> CHECK_OUT_TIME = createField(DSL.name("check_out_time"), SQLDataType.LOCALDATETIME(0), this, "签退时间");

    /**
     * The column <code>lesson.edu_attendance.remark</code>. 备注
     */
    public final TableField<EduAttendanceRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>lesson.edu_attendance.created_at</code>. 创建时间
     */
    public final TableField<EduAttendanceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_attendance.updated_at</code>. 更新时间
     */
    public final TableField<EduAttendanceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_attendance.created_by</code>. 创建人ID
     */
    public final TableField<EduAttendanceRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_attendance.updated_by</code>. 更新人ID
     */
    public final TableField<EduAttendanceRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_attendance.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduAttendanceRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduAttendance(Name alias, Table<EduAttendanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduAttendance(Name alias, Table<EduAttendanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("考勤表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_attendance</code> table reference
     */
    public EduAttendance(String alias) {
        this(DSL.name(alias), EDU_ATTENDANCE);
    }

    /**
     * Create an aliased <code>lesson.edu_attendance</code> table reference
     */
    public EduAttendance(Name alias) {
        this(alias, EDU_ATTENDANCE);
    }

    /**
     * Create a <code>lesson.edu_attendance</code> table reference
     */
    public EduAttendance() {
        this(DSL.name("edu_attendance"), null);
    }

    public <O extends Record> EduAttendance(Table<O> child, ForeignKey<O, EduAttendanceRecord> key) {
        super(child, key, EDU_ATTENDANCE);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_ATTENDANCE_IDX_CHECK_IN_TIME, Indexes.EDU_ATTENDANCE_IDX_CREATED_AT, Indexes.EDU_ATTENDANCE_IDX_SCHEDULE_ID, Indexes.EDU_ATTENDANCE_IDX_STUDENT_ID);
    }

    @Override
    public Identity<EduAttendanceRecord, Long> getIdentity() {
        return (Identity<EduAttendanceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduAttendanceRecord> getPrimaryKey() {
        return Keys.KEY_EDU_ATTENDANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduAttendanceRecord>> getKeys() {
        return Arrays.<UniqueKey<EduAttendanceRecord>>asList(Keys.KEY_EDU_ATTENDANCE_PRIMARY, Keys.KEY_EDU_ATTENDANCE_UK_SCHEDULE_STUDENT);
    }

    @Override
    public EduAttendance as(String alias) {
        return new EduAttendance(DSL.name(alias), this);
    }

    @Override
    public EduAttendance as(Name alias) {
        return new EduAttendance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduAttendance rename(String name) {
        return new EduAttendance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduAttendance rename(Name name) {
        return new EduAttendance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, Byte, LocalDateTime, LocalDateTime, String, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
