/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduStudentCourseOperationRecordRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 学生课程操作记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduStudentCourseOperationRecord extends TableImpl<EduStudentCourseOperationRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_student_course_operation_record</code>
     */
    public static final EduStudentCourseOperationRecord EDU_STUDENT_COURSE_OPERATION_RECORD = new EduStudentCourseOperationRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduStudentCourseOperationRecordRecord> getRecordType() {
        return EduStudentCourseOperationRecordRecord.class;
    }

    /**
     * The column <code>lesson.edu_student_course_operation_record.id</code>. 记录ID
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "记录ID");

    /**
     * The column <code>lesson.edu_student_course_operation_record.student_id</code>. 学生ID
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "学生ID");

    /**
     * The column <code>lesson.edu_student_course_operation_record.student_name</code>. 学生姓名
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> STUDENT_NAME = createField(DSL.name("student_name"), SQLDataType.VARCHAR(50).nullable(false), this, "学生姓名");

    /**
     * The column <code>lesson.edu_student_course_operation_record.course_id</code>. 课程ID
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.BIGINT.nullable(false), this, "课程ID");

    /**
     * The column <code>lesson.edu_student_course_operation_record.course_name</code>. 课程名称
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> COURSE_NAME = createField(DSL.name("course_name"), SQLDataType.VARCHAR(100).nullable(false), this, "课程名称");

    /**
     * The column <code>lesson.edu_student_course_operation_record.operation_type</code>. 操作类型：TRANSFER_COURSE-转课, TRANSFER_CLASS-转班, REFUND-退费
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> OPERATION_TYPE = createField(DSL.name("operation_type"), SQLDataType.VARCHAR(20).nullable(false), this, "操作类型：TRANSFER_COURSE-转课, TRANSFER_CLASS-转班, REFUND-退费");

    /**
     * The column <code>lesson.edu_student_course_operation_record.before_status</code>. 操作前状态
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> BEFORE_STATUS = createField(DSL.name("before_status"), SQLDataType.VARCHAR(20).nullable(false), this, "操作前状态");

    /**
     * The column <code>lesson.edu_student_course_operation_record.after_status</code>. 操作后状态
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> AFTER_STATUS = createField(DSL.name("after_status"), SQLDataType.VARCHAR(20).nullable(false), this, "操作后状态");

    /**
     * The column <code>lesson.edu_student_course_operation_record.source_course_id</code>. 原课程ID（转课时使用）
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> SOURCE_COURSE_ID = createField(DSL.name("source_course_id"), SQLDataType.BIGINT, this, "原课程ID（转课时使用）");

    /**
     * The column <code>lesson.edu_student_course_operation_record.target_course_id</code>. 目标课程ID（转课时使用）
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> TARGET_COURSE_ID = createField(DSL.name("target_course_id"), SQLDataType.BIGINT, this, "目标课程ID（转课时使用）");

    /**
     * The column <code>lesson.edu_student_course_operation_record.source_class_id</code>. 原班级ID（转班时使用）
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> SOURCE_CLASS_ID = createField(DSL.name("source_class_id"), SQLDataType.BIGINT, this, "原班级ID（转班时使用）");

    /**
     * The column <code>lesson.edu_student_course_operation_record.target_class_id</code>. 目标班级ID（转班时使用）
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> TARGET_CLASS_ID = createField(DSL.name("target_class_id"), SQLDataType.BIGINT, this, "目标班级ID（转班时使用）");

    /**
     * The column <code>lesson.edu_student_course_operation_record.refund_amount</code>. 退费金额（退费时使用）
     */
    public final TableField<EduStudentCourseOperationRecordRecord, BigDecimal> REFUND_AMOUNT = createField(DSL.name("refund_amount"), SQLDataType.DECIMAL(10, 2), this, "退费金额（退费时使用）");

    /**
     * The column <code>lesson.edu_student_course_operation_record.refund_method</code>. 退费方式：CASH-现金, BANK_TRANSFER-银行转账, WECHAT-微信, ALIPAY-支付宝
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> REFUND_METHOD = createField(DSL.name("refund_method"), SQLDataType.VARCHAR(20), this, "退费方式：CASH-现金, BANK_TRANSFER-银行转账, WECHAT-微信, ALIPAY-支付宝");

    /**
     * The column <code>lesson.edu_student_course_operation_record.operation_reason</code>. 操作原因
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> OPERATION_REASON = createField(DSL.name("operation_reason"), SQLDataType.CLOB, this, "操作原因");

    /**
     * The column <code>lesson.edu_student_course_operation_record.operator_id</code>. 操作人ID
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Long> OPERATOR_ID = createField(DSL.name("operator_id"), SQLDataType.BIGINT.nullable(false), this, "操作人ID");

    /**
     * The column <code>lesson.edu_student_course_operation_record.operator_name</code>. 操作人姓名
     */
    public final TableField<EduStudentCourseOperationRecordRecord, String> OPERATOR_NAME = createField(DSL.name("operator_name"), SQLDataType.VARCHAR(50).nullable(false), this, "操作人姓名");

    /**
     * The column <code>lesson.edu_student_course_operation_record.operation_time</code>. 操作时间
     */
    public final TableField<EduStudentCourseOperationRecordRecord, LocalDateTime> OPERATION_TIME = createField(DSL.name("operation_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "操作时间");

    /**
     * The column <code>lesson.edu_student_course_operation_record.deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduStudentCourseOperationRecordRecord, Byte> DELETED = createField(DSL.name("deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    /**
     * The column <code>lesson.edu_student_course_operation_record.created_time</code>. 创建时间
     */
    public final TableField<EduStudentCourseOperationRecordRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_student_course_operation_record.updated_time</code>. 更新时间
     */
    public final TableField<EduStudentCourseOperationRecordRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private EduStudentCourseOperationRecord(Name alias, Table<EduStudentCourseOperationRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduStudentCourseOperationRecord(Name alias, Table<EduStudentCourseOperationRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("学生课程操作记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_student_course_operation_record</code> table reference
     */
    public EduStudentCourseOperationRecord(String alias) {
        this(DSL.name(alias), EDU_STUDENT_COURSE_OPERATION_RECORD);
    }

    /**
     * Create an aliased <code>lesson.edu_student_course_operation_record</code> table reference
     */
    public EduStudentCourseOperationRecord(Name alias) {
        this(alias, EDU_STUDENT_COURSE_OPERATION_RECORD);
    }

    /**
     * Create a <code>lesson.edu_student_course_operation_record</code> table reference
     */
    public EduStudentCourseOperationRecord() {
        this(DSL.name("edu_student_course_operation_record"), null);
    }

    public <O extends Record> EduStudentCourseOperationRecord(Table<O> child, ForeignKey<O, EduStudentCourseOperationRecordRecord> key) {
        super(child, key, EDU_STUDENT_COURSE_OPERATION_RECORD);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_STUDENT_COURSE_OPERATION_RECORD_IDX_COURSE_ID, Indexes.EDU_STUDENT_COURSE_OPERATION_RECORD_IDX_OPERATION_TIME, Indexes.EDU_STUDENT_COURSE_OPERATION_RECORD_IDX_OPERATION_TYPE, Indexes.EDU_STUDENT_COURSE_OPERATION_RECORD_IDX_STUDENT_ID);
    }

    @Override
    public Identity<EduStudentCourseOperationRecordRecord, Long> getIdentity() {
        return (Identity<EduStudentCourseOperationRecordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduStudentCourseOperationRecordRecord> getPrimaryKey() {
        return Keys.KEY_EDU_STUDENT_COURSE_OPERATION_RECORD_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduStudentCourseOperationRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<EduStudentCourseOperationRecordRecord>>asList(Keys.KEY_EDU_STUDENT_COURSE_OPERATION_RECORD_PRIMARY);
    }

    @Override
    public EduStudentCourseOperationRecord as(String alias) {
        return new EduStudentCourseOperationRecord(DSL.name(alias), this);
    }

    @Override
    public EduStudentCourseOperationRecord as(Name alias) {
        return new EduStudentCourseOperationRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduStudentCourseOperationRecord rename(String name) {
        return new EduStudentCourseOperationRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduStudentCourseOperationRecord rename(Name name) {
        return new EduStudentCourseOperationRecord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, Long, String, Long, String, String, String, String, Long, Long, Long, Long, BigDecimal, String, String, Long, String, LocalDateTime, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
