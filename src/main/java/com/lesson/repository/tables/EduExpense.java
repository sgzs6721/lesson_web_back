/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduExpenseRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 费用记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduExpense extends TableImpl<EduExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_expense</code>
     */
    public static final EduExpense EDU_EXPENSE = new EduExpense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduExpenseRecord> getRecordType() {
        return EduExpenseRecord.class;
    }

    /**
     * The column <code>lesson.edu_expense.id</code>. 主键ID
     */
    public final TableField<EduExpenseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_expense.institution_id</code>. 所属机构ID
     */
    public final TableField<EduExpenseRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_expense.campus_id</code>. 所属校区ID
     */
    public final TableField<EduExpenseRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT, this, "所属校区ID");

    /**
     * The column <code>lesson.edu_expense.expense_type_id</code>. 费用类型ID
     */
    public final TableField<EduExpenseRecord, Long> EXPENSE_TYPE_ID = createField(DSL.name("expense_type_id"), SQLDataType.BIGINT.nullable(false), this, "费用类型ID");

    /**
     * The column <code>lesson.edu_expense.amount</code>. 费用金额
     */
    public final TableField<EduExpenseRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "费用金额");

    /**
     * The column <code>lesson.edu_expense.expense_date</code>. 费用日期
     */
    public final TableField<EduExpenseRecord, LocalDate> EXPENSE_DATE = createField(DSL.name("expense_date"), SQLDataType.LOCALDATE.nullable(false), this, "费用日期");

    /**
     * The column <code>lesson.edu_expense.payment_method</code>. 支付方式：1-现金，2-微信，3-支付宝，4-银行卡，5-其他
     */
    public final TableField<EduExpenseRecord, Byte> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.TINYINT, this, "支付方式：1-现金，2-微信，3-支付宝，4-银行卡，5-其他");

    /**
     * The column <code>lesson.edu_expense.payment_status</code>. 支付状态：0-未支付，1-已支付
     */
    public final TableField<EduExpenseRecord, Byte> PAYMENT_STATUS = createField(DSL.name("payment_status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "支付状态：0-未支付，1-已支付");

    /**
     * The column <code>lesson.edu_expense.payment_time</code>. 支付时间
     */
    public final TableField<EduExpenseRecord, LocalDateTime> PAYMENT_TIME = createField(DSL.name("payment_time"), SQLDataType.LOCALDATETIME(0), this, "支付时间");

    /**
     * The column <code>lesson.edu_expense.description</code>. 费用描述
     */
    public final TableField<EduExpenseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "费用描述");

    /**
     * The column <code>lesson.edu_expense.attachments</code>. 附件列表(JSON)
     */
    public final TableField<EduExpenseRecord, String> ATTACHMENTS = createField(DSL.name("attachments"), SQLDataType.CLOB, this, "附件列表(JSON)");

    /**
     * The column <code>lesson.edu_expense.created_at</code>. 创建时间
     */
    public final TableField<EduExpenseRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_expense.updated_at</code>. 更新时间
     */
    public final TableField<EduExpenseRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_expense.created_by</code>. 创建人ID
     */
    public final TableField<EduExpenseRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_expense.updated_by</code>. 更新人ID
     */
    public final TableField<EduExpenseRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_expense.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduExpenseRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduExpense(Name alias, Table<EduExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduExpense(Name alias, Table<EduExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("费用记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_expense</code> table reference
     */
    public EduExpense(String alias) {
        this(DSL.name(alias), EDU_EXPENSE);
    }

    /**
     * Create an aliased <code>lesson.edu_expense</code> table reference
     */
    public EduExpense(Name alias) {
        this(alias, EDU_EXPENSE);
    }

    /**
     * Create a <code>lesson.edu_expense</code> table reference
     */
    public EduExpense() {
        this(DSL.name("edu_expense"), null);
    }

    public <O extends Record> EduExpense(Table<O> child, ForeignKey<O, EduExpenseRecord> key) {
        super(child, key, EDU_EXPENSE);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_EXPENSE_IDX_CAMPUS_ID, Indexes.EDU_EXPENSE_IDX_CREATED_AT, Indexes.EDU_EXPENSE_IDX_EXPENSE_DATE, Indexes.EDU_EXPENSE_IDX_EXPENSE_TYPE_ID, Indexes.EDU_EXPENSE_IDX_INSTITUTION_ID, Indexes.EDU_EXPENSE_IDX_PAYMENT_STATUS);
    }

    @Override
    public Identity<EduExpenseRecord, Long> getIdentity() {
        return (Identity<EduExpenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduExpenseRecord> getPrimaryKey() {
        return Keys.KEY_EDU_EXPENSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduExpenseRecord>> getKeys() {
        return Arrays.<UniqueKey<EduExpenseRecord>>asList(Keys.KEY_EDU_EXPENSE_PRIMARY);
    }

    @Override
    public EduExpense as(String alias) {
        return new EduExpense(DSL.name(alias), this);
    }

    @Override
    public EduExpense as(Name alias) {
        return new EduExpense(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduExpense rename(String name) {
        return new EduExpense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduExpense rename(Name name) {
        return new EduExpense(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, Long, Long, BigDecimal, LocalDate, Byte, Byte, LocalDateTime, String, String, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
