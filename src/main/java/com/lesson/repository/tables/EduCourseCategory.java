/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduCourseCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 课程分类表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCourseCategory extends TableImpl<EduCourseCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_course_category</code>
     */
    public static final EduCourseCategory EDU_COURSE_CATEGORY = new EduCourseCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCourseCategoryRecord> getRecordType() {
        return EduCourseCategoryRecord.class;
    }

    /**
     * The column <code>lesson.edu_course_category.id</code>. 主键ID
     */
    public final TableField<EduCourseCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_course_category.parent_id</code>. 父分类ID
     */
    public final TableField<EduCourseCategoryRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "父分类ID");

    /**
     * The column <code>lesson.edu_course_category.name</code>. 分类名称
     */
    public final TableField<EduCourseCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "分类名称");

    /**
     * The column <code>lesson.edu_course_category.code</code>. 分类编码
     */
    public final TableField<EduCourseCategoryRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "分类编码");

    /**
     * The column <code>lesson.edu_course_category.icon</code>. 图标
     */
    public final TableField<EduCourseCategoryRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(100), this, "图标");

    /**
     * The column <code>lesson.edu_course_category.sort</code>. 排序
     */
    public final TableField<EduCourseCategoryRecord, Integer> SORT = createField(DSL.name("sort"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "排序");

    /**
     * The column <code>lesson.edu_course_category.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduCourseCategoryRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_course_category.created_at</code>. 创建时间
     */
    public final TableField<EduCourseCategoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_course_category.updated_at</code>. 更新时间
     */
    public final TableField<EduCourseCategoryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_course_category.created_by</code>. 创建人ID
     */
    public final TableField<EduCourseCategoryRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_course_category.updated_by</code>. 更新人ID
     */
    public final TableField<EduCourseCategoryRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_course_category.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCourseCategoryRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduCourseCategory(Name alias, Table<EduCourseCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCourseCategory(Name alias, Table<EduCourseCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("课程分类表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_course_category</code> table reference
     */
    public EduCourseCategory(String alias) {
        this(DSL.name(alias), EDU_COURSE_CATEGORY);
    }

    /**
     * Create an aliased <code>lesson.edu_course_category</code> table reference
     */
    public EduCourseCategory(Name alias) {
        this(alias, EDU_COURSE_CATEGORY);
    }

    /**
     * Create a <code>lesson.edu_course_category</code> table reference
     */
    public EduCourseCategory() {
        this(DSL.name("edu_course_category"), null);
    }

    public <O extends Record> EduCourseCategory(Table<O> child, ForeignKey<O, EduCourseCategoryRecord> key) {
        super(child, key, EDU_COURSE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COURSE_CATEGORY_IDX_CREATED_AT, Indexes.EDU_COURSE_CATEGORY_IDX_PARENT_ID);
    }

    @Override
    public Identity<EduCourseCategoryRecord, Long> getIdentity() {
        return (Identity<EduCourseCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCourseCategoryRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COURSE_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCourseCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCourseCategoryRecord>>asList(Keys.KEY_EDU_COURSE_CATEGORY_PRIMARY, Keys.KEY_EDU_COURSE_CATEGORY_UK_CODE);
    }

    @Override
    public EduCourseCategory as(String alias) {
        return new EduCourseCategory(DSL.name(alias), this);
    }

    @Override
    public EduCourseCategory as(Name alias) {
        return new EduCourseCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseCategory rename(String name) {
        return new EduCourseCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseCategory rename(Name name) {
        return new EduCourseCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, String, String, Integer, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
