/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduPaymentRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 支付记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduPayment extends TableImpl<EduPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_payment</code>
     */
    public static final EduPayment EDU_PAYMENT = new EduPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduPaymentRecord> getRecordType() {
        return EduPaymentRecord.class;
    }

    /**
     * The column <code>lesson.edu_payment.id</code>. 主键ID
     */
    public final TableField<EduPaymentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_payment.institution_id</code>. 所属机构ID
     */
    public final TableField<EduPaymentRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_payment.student_id</code>. 学生ID
     */
    public final TableField<EduPaymentRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "学生ID");

    /**
     * The column <code>lesson.edu_payment.class_id</code>. 班级ID
     */
    public final TableField<EduPaymentRecord, Long> CLASS_ID = createField(DSL.name("class_id"), SQLDataType.BIGINT, this, "班级ID");

    /**
     * The column <code>lesson.edu_payment.course_id</code>. 课程ID
     */
    public final TableField<EduPaymentRecord, Long> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.BIGINT, this, "课程ID");

    /**
     * The column <code>lesson.edu_payment.order_no</code>. 订单编号
     */
    public final TableField<EduPaymentRecord, String> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.VARCHAR(50).nullable(false), this, "订单编号");

    /**
     * The column <code>lesson.edu_payment.payment_no</code>. 支付单号
     */
    public final TableField<EduPaymentRecord, String> PAYMENT_NO = createField(DSL.name("payment_no"), SQLDataType.VARCHAR(100), this, "支付单号");

    /**
     * The column <code>lesson.edu_payment.amount</code>. 支付金额
     */
    public final TableField<EduPaymentRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "支付金额");

    /**
     * The column <code>lesson.edu_payment.payment_type</code>. 支付方式：1-现金，2-微信，3-支付宝，4-银行卡，5-其他
     */
    public final TableField<EduPaymentRecord, Byte> PAYMENT_TYPE = createField(DSL.name("payment_type"), SQLDataType.TINYINT.nullable(false), this, "支付方式：1-现金，2-微信，3-支付宝，4-银行卡，5-其他");

    /**
     * The column <code>lesson.edu_payment.payment_status</code>. 支付状态：0-未支付，1-已支付，2-已退款，3-已取消
     */
    public final TableField<EduPaymentRecord, Byte> PAYMENT_STATUS = createField(DSL.name("payment_status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "支付状态：0-未支付，1-已支付，2-已退款，3-已取消");

    /**
     * The column <code>lesson.edu_payment.payment_time</code>. 支付时间
     */
    public final TableField<EduPaymentRecord, LocalDateTime> PAYMENT_TIME = createField(DSL.name("payment_time"), SQLDataType.LOCALDATETIME(0), this, "支付时间");

    /**
     * The column <code>lesson.edu_payment.refund_time</code>. 退款时间
     */
    public final TableField<EduPaymentRecord, LocalDateTime> REFUND_TIME = createField(DSL.name("refund_time"), SQLDataType.LOCALDATETIME(0), this, "退款时间");

    /**
     * The column <code>lesson.edu_payment.refund_amount</code>. 退款金额
     */
    public final TableField<EduPaymentRecord, BigDecimal> REFUND_AMOUNT = createField(DSL.name("refund_amount"), SQLDataType.DECIMAL(10, 2), this, "退款金额");

    /**
     * The column <code>lesson.edu_payment.refund_reason</code>. 退款原因
     */
    public final TableField<EduPaymentRecord, String> REFUND_REASON = createField(DSL.name("refund_reason"), SQLDataType.VARCHAR(255), this, "退款原因");

    /**
     * The column <code>lesson.edu_payment.remark</code>. 备注
     */
    public final TableField<EduPaymentRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>lesson.edu_payment.created_at</code>. 创建时间
     */
    public final TableField<EduPaymentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_payment.updated_at</code>. 更新时间
     */
    public final TableField<EduPaymentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_payment.created_by</code>. 创建人ID
     */
    public final TableField<EduPaymentRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_payment.updated_by</code>. 更新人ID
     */
    public final TableField<EduPaymentRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_payment.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduPaymentRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduPayment(Name alias, Table<EduPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduPayment(Name alias, Table<EduPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("支付记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_payment</code> table reference
     */
    public EduPayment(String alias) {
        this(DSL.name(alias), EDU_PAYMENT);
    }

    /**
     * Create an aliased <code>lesson.edu_payment</code> table reference
     */
    public EduPayment(Name alias) {
        this(alias, EDU_PAYMENT);
    }

    /**
     * Create a <code>lesson.edu_payment</code> table reference
     */
    public EduPayment() {
        this(DSL.name("edu_payment"), null);
    }

    public <O extends Record> EduPayment(Table<O> child, ForeignKey<O, EduPaymentRecord> key) {
        super(child, key, EDU_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_PAYMENT_IDX_CLASS_ID, Indexes.EDU_PAYMENT_IDX_COURSE_ID, Indexes.EDU_PAYMENT_IDX_CREATED_AT, Indexes.EDU_PAYMENT_IDX_INSTITUTION_ID, Indexes.EDU_PAYMENT_IDX_PAYMENT_STATUS, Indexes.EDU_PAYMENT_IDX_PAYMENT_TIME, Indexes.EDU_PAYMENT_IDX_STUDENT_ID);
    }

    @Override
    public Identity<EduPaymentRecord, Long> getIdentity() {
        return (Identity<EduPaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduPaymentRecord> getPrimaryKey() {
        return Keys.KEY_EDU_PAYMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<EduPaymentRecord>>asList(Keys.KEY_EDU_PAYMENT_PRIMARY, Keys.KEY_EDU_PAYMENT_UK_ORDER_NO);
    }

    @Override
    public EduPayment as(String alias) {
        return new EduPayment(DSL.name(alias), this);
    }

    @Override
    public EduPayment as(Name alias) {
        return new EduPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduPayment rename(String name) {
        return new EduPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduPayment rename(Name name) {
        return new EduPayment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, Long, Long, Long, Long, String, String, BigDecimal, Byte, Byte, LocalDateTime, LocalDateTime, BigDecimal, String, String, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
