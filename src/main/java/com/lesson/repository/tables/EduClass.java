/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduClassRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 班级表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduClass extends TableImpl<EduClassRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_class</code>
     */
    public static final EduClass EDU_CLASS = new EduClass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduClassRecord> getRecordType() {
        return EduClassRecord.class;
    }

    /**
     * The column <code>lesson.edu_class.id</code>. 主键ID
     */
    public final TableField<EduClassRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_class.institution_id</code>. 所属机构ID
     */
    public final TableField<EduClassRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_class.campus_id</code>. 所属校区ID
     */
    public final TableField<EduClassRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT.nullable(false), this, "所属校区ID");

    /**
     * The column <code>lesson.edu_class.course_id</code>. 课程ID
     */
    public final TableField<EduClassRecord, Long> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.BIGINT.nullable(false), this, "课程ID");

    /**
     * The column <code>lesson.edu_class.name</code>. 班级名称
     */
    public final TableField<EduClassRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "班级名称");

    /**
     * The column <code>lesson.edu_class.code</code>. 班级编码
     */
    public final TableField<EduClassRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "班级编码");

    /**
     * The column <code>lesson.edu_class.cover</code>. 班级封面
     */
    public final TableField<EduClassRecord, String> COVER = createField(DSL.name("cover"), SQLDataType.VARCHAR(255), this, "班级封面");

    /**
     * The column <code>lesson.edu_class.description</code>. 班级描述
     */
    public final TableField<EduClassRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "班级描述");

    /**
     * The column <code>lesson.edu_class.start_date</code>. 开班日期
     */
    public final TableField<EduClassRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "开班日期");

    /**
     * The column <code>lesson.edu_class.end_date</code>. 结班日期
     */
    public final TableField<EduClassRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "结班日期");

    /**
     * The column <code>lesson.edu_class.capacity</code>. 班级容量
     */
    public final TableField<EduClassRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER, this, "班级容量");

    /**
     * The column <code>lesson.edu_class.current_count</code>. 当前人数
     */
    public final TableField<EduClassRecord, Integer> CURRENT_COUNT = createField(DSL.name("current_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "当前人数");

    /**
     * The column <code>lesson.edu_class.coach_id</code>. 班主任ID
     */
    public final TableField<EduClassRecord, Long> COACH_ID = createField(DSL.name("coach_id"), SQLDataType.BIGINT, this, "班主任ID");

    /**
     * The column <code>lesson.edu_class.status</code>. 状态：0-已结班，1-进行中，2-未开班
     */
    public final TableField<EduClassRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-已结班，1-进行中，2-未开班");

    /**
     * The column <code>lesson.edu_class.created_at</code>. 创建时间
     */
    public final TableField<EduClassRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_class.updated_at</code>. 更新时间
     */
    public final TableField<EduClassRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_class.created_by</code>. 创建人ID
     */
    public final TableField<EduClassRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_class.updated_by</code>. 更新人ID
     */
    public final TableField<EduClassRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_class.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduClassRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduClass(Name alias, Table<EduClassRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduClass(Name alias, Table<EduClassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("班级表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_class</code> table reference
     */
    public EduClass(String alias) {
        this(DSL.name(alias), EDU_CLASS);
    }

    /**
     * Create an aliased <code>lesson.edu_class</code> table reference
     */
    public EduClass(Name alias) {
        this(alias, EDU_CLASS);
    }

    /**
     * Create a <code>lesson.edu_class</code> table reference
     */
    public EduClass() {
        this(DSL.name("edu_class"), null);
    }

    public <O extends Record> EduClass(Table<O> child, ForeignKey<O, EduClassRecord> key) {
        super(child, key, EDU_CLASS);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_CLASS_IDX_CAMPUS_ID, Indexes.EDU_CLASS_IDX_COACH_ID, Indexes.EDU_CLASS_IDX_COURSE_ID, Indexes.EDU_CLASS_IDX_CREATED_AT, Indexes.EDU_CLASS_IDX_INSTITUTION_ID, Indexes.EDU_CLASS_IDX_NAME);
    }

    @Override
    public Identity<EduClassRecord, Long> getIdentity() {
        return (Identity<EduClassRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduClassRecord> getPrimaryKey() {
        return Keys.KEY_EDU_CLASS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduClassRecord>> getKeys() {
        return Arrays.<UniqueKey<EduClassRecord>>asList(Keys.KEY_EDU_CLASS_PRIMARY, Keys.KEY_EDU_CLASS_UK_CODE);
    }

    @Override
    public EduClass as(String alias) {
        return new EduClass(DSL.name(alias), this);
    }

    @Override
    public EduClass as(Name alias) {
        return new EduClass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClass rename(String name) {
        return new EduClass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClass rename(Name name) {
        return new EduClass(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, Long, Long, String, String, String, String, LocalDate, LocalDate, Integer, Integer, Long, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
