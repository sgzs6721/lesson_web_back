/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduDataExportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 数据导出记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduDataExport extends TableImpl<EduDataExportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_data_export</code>
     */
    public static final EduDataExport EDU_DATA_EXPORT = new EduDataExport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduDataExportRecord> getRecordType() {
        return EduDataExportRecord.class;
    }

    /**
     * The column <code>lesson.edu_data_export.id</code>. 主键ID
     */
    public final TableField<EduDataExportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_data_export.institution_id</code>. 所属机构ID
     */
    public final TableField<EduDataExportRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_data_export.export_type</code>. 导出类型：1-学员数据，2-课程数据，3-财务数据，4-考勤数据
     */
    public final TableField<EduDataExportRecord, Byte> EXPORT_TYPE = createField(DSL.name("export_type"), SQLDataType.TINYINT.nullable(false), this, "导出类型：1-学员数据，2-课程数据，3-财务数据，4-考勤数据");

    /**
     * The column <code>lesson.edu_data_export.file_name</code>. 文件名称
     */
    public final TableField<EduDataExportRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(255).nullable(false), this, "文件名称");

    /**
     * The column <code>lesson.edu_data_export.file_path</code>. 文件路径
     */
    public final TableField<EduDataExportRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.VARCHAR(500).nullable(false), this, "文件路径");

    /**
     * The column <code>lesson.edu_data_export.file_size</code>. 文件大小(字节)
     */
    public final TableField<EduDataExportRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT.nullable(false), this, "文件大小(字节)");

    /**
     * The column <code>lesson.edu_data_export.export_params</code>. 导出参数(JSON)
     */
    public final TableField<EduDataExportRecord, JSON> EXPORT_PARAMS = createField(DSL.name("export_params"), SQLDataType.JSON, this, "导出参数(JSON)");

    /**
     * The column <code>lesson.edu_data_export.status</code>. 状态：0-处理中，1-已完成，2-失败
     */
    public final TableField<EduDataExportRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "状态：0-处理中，1-已完成，2-失败");

    /**
     * The column <code>lesson.edu_data_export.error_message</code>. 错误信息
     */
    public final TableField<EduDataExportRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.VARCHAR(500), this, "错误信息");

    /**
     * The column <code>lesson.edu_data_export.created_at</code>. 创建时间
     */
    public final TableField<EduDataExportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_data_export.updated_at</code>. 更新时间
     */
    public final TableField<EduDataExportRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_data_export.created_by</code>. 创建人ID
     */
    public final TableField<EduDataExportRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_data_export.updated_by</code>. 更新人ID
     */
    public final TableField<EduDataExportRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_data_export.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduDataExportRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduDataExport(Name alias, Table<EduDataExportRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduDataExport(Name alias, Table<EduDataExportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("数据导出记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_data_export</code> table reference
     */
    public EduDataExport(String alias) {
        this(DSL.name(alias), EDU_DATA_EXPORT);
    }

    /**
     * Create an aliased <code>lesson.edu_data_export</code> table reference
     */
    public EduDataExport(Name alias) {
        this(alias, EDU_DATA_EXPORT);
    }

    /**
     * Create a <code>lesson.edu_data_export</code> table reference
     */
    public EduDataExport() {
        this(DSL.name("edu_data_export"), null);
    }

    public <O extends Record> EduDataExport(Table<O> child, ForeignKey<O, EduDataExportRecord> key) {
        super(child, key, EDU_DATA_EXPORT);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_DATA_EXPORT_IDX_CREATED_AT, Indexes.EDU_DATA_EXPORT_IDX_EXPORT_TYPE, Indexes.EDU_DATA_EXPORT_IDX_INSTITUTION_ID, Indexes.EDU_DATA_EXPORT_IDX_STATUS);
    }

    @Override
    public Identity<EduDataExportRecord, Long> getIdentity() {
        return (Identity<EduDataExportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduDataExportRecord> getPrimaryKey() {
        return Keys.KEY_EDU_DATA_EXPORT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduDataExportRecord>> getKeys() {
        return Arrays.<UniqueKey<EduDataExportRecord>>asList(Keys.KEY_EDU_DATA_EXPORT_PRIMARY);
    }

    @Override
    public EduDataExport as(String alias) {
        return new EduDataExport(DSL.name(alias), this);
    }

    @Override
    public EduDataExport as(Name alias) {
        return new EduDataExport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduDataExport rename(String name) {
        return new EduDataExport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduDataExport rename(Name name) {
        return new EduDataExport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Byte, String, String, Long, JSON, Byte, String, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
