/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduDashboardRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 数据看板表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduDashboard extends TableImpl<EduDashboardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_dashboard</code>
     */
    public static final EduDashboard EDU_DASHBOARD = new EduDashboard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduDashboardRecord> getRecordType() {
        return EduDashboardRecord.class;
    }

    /**
     * The column <code>lesson.edu_dashboard.id</code>. 主键ID
     */
    public final TableField<EduDashboardRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_dashboard.institution_id</code>. 所属机构ID
     */
    public final TableField<EduDashboardRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_dashboard.dashboard_type</code>. 看板类型：1-总览，2-财务，3-教学，4-运营
     */
    public final TableField<EduDashboardRecord, Byte> DASHBOARD_TYPE = createField(DSL.name("dashboard_type"), SQLDataType.TINYINT.nullable(false), this, "看板类型：1-总览，2-财务，3-教学，4-运营");

    /**
     * The column <code>lesson.edu_dashboard.dashboard_name</code>. 看板名称
     */
    public final TableField<EduDashboardRecord, String> DASHBOARD_NAME = createField(DSL.name("dashboard_name"), SQLDataType.VARCHAR(100).nullable(false), this, "看板名称");

    /**
     * The column <code>lesson.edu_dashboard.layout</code>. 布局配置(JSON)
     */
    public final TableField<EduDashboardRecord, JSON> LAYOUT = createField(DSL.name("layout"), SQLDataType.JSON.nullable(false), this, "布局配置(JSON)");

    /**
     * The column <code>lesson.edu_dashboard.widgets</code>. 组件配置(JSON)
     */
    public final TableField<EduDashboardRecord, JSON> WIDGETS = createField(DSL.name("widgets"), SQLDataType.JSON.nullable(false), this, "组件配置(JSON)");

    /**
     * The column <code>lesson.edu_dashboard.refresh_interval</code>. 刷新间隔(秒)
     */
    public final TableField<EduDashboardRecord, Integer> REFRESH_INTERVAL = createField(DSL.name("refresh_interval"), SQLDataType.INTEGER.defaultValue(DSL.inline("300", SQLDataType.INTEGER)), this, "刷新间隔(秒)");

    /**
     * The column <code>lesson.edu_dashboard.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduDashboardRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_dashboard.created_at</code>. 创建时间
     */
    public final TableField<EduDashboardRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_dashboard.updated_at</code>. 更新时间
     */
    public final TableField<EduDashboardRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_dashboard.created_by</code>. 创建人ID
     */
    public final TableField<EduDashboardRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_dashboard.updated_by</code>. 更新人ID
     */
    public final TableField<EduDashboardRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_dashboard.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduDashboardRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduDashboard(Name alias, Table<EduDashboardRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduDashboard(Name alias, Table<EduDashboardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("数据看板表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_dashboard</code> table reference
     */
    public EduDashboard(String alias) {
        this(DSL.name(alias), EDU_DASHBOARD);
    }

    /**
     * Create an aliased <code>lesson.edu_dashboard</code> table reference
     */
    public EduDashboard(Name alias) {
        this(alias, EDU_DASHBOARD);
    }

    /**
     * Create a <code>lesson.edu_dashboard</code> table reference
     */
    public EduDashboard() {
        this(DSL.name("edu_dashboard"), null);
    }

    public <O extends Record> EduDashboard(Table<O> child, ForeignKey<O, EduDashboardRecord> key) {
        super(child, key, EDU_DASHBOARD);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_DASHBOARD_IDX_CREATED_AT, Indexes.EDU_DASHBOARD_IDX_DASHBOARD_TYPE, Indexes.EDU_DASHBOARD_IDX_INSTITUTION_ID);
    }

    @Override
    public Identity<EduDashboardRecord, Long> getIdentity() {
        return (Identity<EduDashboardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduDashboardRecord> getPrimaryKey() {
        return Keys.KEY_EDU_DASHBOARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduDashboardRecord>> getKeys() {
        return Arrays.<UniqueKey<EduDashboardRecord>>asList(Keys.KEY_EDU_DASHBOARD_PRIMARY);
    }

    @Override
    public EduDashboard as(String alias) {
        return new EduDashboard(DSL.name(alias), this);
    }

    @Override
    public EduDashboard as(Name alias) {
        return new EduDashboard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduDashboard rename(String name) {
        return new EduDashboard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduDashboard rename(Name name) {
        return new EduDashboard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Byte, String, JSON, JSON, Integer, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
