/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduCourseLessonRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 课程课时表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCourseLesson extends TableImpl<EduCourseLessonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_course_lesson</code>
     */
    public static final EduCourseLesson EDU_COURSE_LESSON = new EduCourseLesson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCourseLessonRecord> getRecordType() {
        return EduCourseLessonRecord.class;
    }

    /**
     * The column <code>lesson.edu_course_lesson.id</code>. 主键ID
     */
    public final TableField<EduCourseLessonRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_course_lesson.course_id</code>. 课程ID
     */
    public final TableField<EduCourseLessonRecord, Long> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.BIGINT.nullable(false), this, "课程ID");

    /**
     * The column <code>lesson.edu_course_lesson.chapter_id</code>. 章节ID
     */
    public final TableField<EduCourseLessonRecord, Long> CHAPTER_ID = createField(DSL.name("chapter_id"), SQLDataType.BIGINT.nullable(false), this, "章节ID");

    /**
     * The column <code>lesson.edu_course_lesson.name</code>. 课时名称
     */
    public final TableField<EduCourseLessonRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "课时名称");

    /**
     * The column <code>lesson.edu_course_lesson.description</code>. 课时描述
     */
    public final TableField<EduCourseLessonRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "课时描述");

    /**
     * The column <code>lesson.edu_course_lesson.duration</code>. 课时时长(分钟)
     */
    public final TableField<EduCourseLessonRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER, this, "课时时长(分钟)");

    /**
     * The column <code>lesson.edu_course_lesson.video_url</code>. 视频URL
     */
    public final TableField<EduCourseLessonRecord, String> VIDEO_URL = createField(DSL.name("video_url"), SQLDataType.VARCHAR(255), this, "视频URL");

    /**
     * The column <code>lesson.edu_course_lesson.sort</code>. 排序
     */
    public final TableField<EduCourseLessonRecord, Integer> SORT = createField(DSL.name("sort"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "排序");

    /**
     * The column <code>lesson.edu_course_lesson.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduCourseLessonRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_course_lesson.created_at</code>. 创建时间
     */
    public final TableField<EduCourseLessonRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_course_lesson.updated_at</code>. 更新时间
     */
    public final TableField<EduCourseLessonRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_course_lesson.created_by</code>. 创建人ID
     */
    public final TableField<EduCourseLessonRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_course_lesson.updated_by</code>. 更新人ID
     */
    public final TableField<EduCourseLessonRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_course_lesson.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCourseLessonRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduCourseLesson(Name alias, Table<EduCourseLessonRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCourseLesson(Name alias, Table<EduCourseLessonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("课程课时表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_course_lesson</code> table reference
     */
    public EduCourseLesson(String alias) {
        this(DSL.name(alias), EDU_COURSE_LESSON);
    }

    /**
     * Create an aliased <code>lesson.edu_course_lesson</code> table reference
     */
    public EduCourseLesson(Name alias) {
        this(alias, EDU_COURSE_LESSON);
    }

    /**
     * Create a <code>lesson.edu_course_lesson</code> table reference
     */
    public EduCourseLesson() {
        this(DSL.name("edu_course_lesson"), null);
    }

    public <O extends Record> EduCourseLesson(Table<O> child, ForeignKey<O, EduCourseLessonRecord> key) {
        super(child, key, EDU_COURSE_LESSON);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COURSE_LESSON_IDX_CHAPTER_ID, Indexes.EDU_COURSE_LESSON_IDX_COURSE_ID, Indexes.EDU_COURSE_LESSON_IDX_CREATED_AT);
    }

    @Override
    public Identity<EduCourseLessonRecord, Long> getIdentity() {
        return (Identity<EduCourseLessonRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCourseLessonRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COURSE_LESSON_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCourseLessonRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCourseLessonRecord>>asList(Keys.KEY_EDU_COURSE_LESSON_PRIMARY);
    }

    @Override
    public EduCourseLesson as(String alias) {
        return new EduCourseLesson(DSL.name(alias), this);
    }

    @Override
    public EduCourseLesson as(Name alias) {
        return new EduCourseLesson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseLesson rename(String name) {
        return new EduCourseLesson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseLesson rename(Name name) {
        return new EduCourseLesson(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, String, Integer, String, Integer, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
