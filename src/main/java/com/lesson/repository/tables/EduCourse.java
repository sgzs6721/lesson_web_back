/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduCourseRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 课程表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCourse extends TableImpl<EduCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_course</code>
     */
    public static final EduCourse EDU_COURSE = new EduCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCourseRecord> getRecordType() {
        return EduCourseRecord.class;
    }

    /**
     * The column <code>lesson.edu_course.id</code>. 主键ID
     */
    public final TableField<EduCourseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_course.institution_id</code>. 所属机构ID
     */
    public final TableField<EduCourseRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_course.campus_id</code>. 所属校区ID
     */
    public final TableField<EduCourseRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT, this, "所属校区ID");

    /**
     * The column <code>lesson.edu_course.category_id</code>. 课程分类ID
     */
    public final TableField<EduCourseRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "课程分类ID");

    /**
     * The column <code>lesson.edu_course.name</code>. 课程名称
     */
    public final TableField<EduCourseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "课程名称");

    /**
     * The column <code>lesson.edu_course.code</code>. 课程编码
     */
    public final TableField<EduCourseRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "课程编码");

    /**
     * The column <code>lesson.edu_course.cover</code>. 课程封面
     */
    public final TableField<EduCourseRecord, String> COVER = createField(DSL.name("cover"), SQLDataType.VARCHAR(255), this, "课程封面");

    /**
     * The column <code>lesson.edu_course.description</code>. 课程描述
     */
    public final TableField<EduCourseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "课程描述");

    /**
     * The column <code>lesson.edu_course.target</code>. 课程目标
     */
    public final TableField<EduCourseRecord, String> TARGET = createField(DSL.name("target"), SQLDataType.CLOB, this, "课程目标");

    /**
     * The column <code>lesson.edu_course.suitable_crowd</code>. 适合人群
     */
    public final TableField<EduCourseRecord, String> SUITABLE_CROWD = createField(DSL.name("suitable_crowd"), SQLDataType.CLOB, this, "适合人群");

    /**
     * The column <code>lesson.edu_course.price</code>. 课程价格
     */
    public final TableField<EduCourseRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "课程价格");

    /**
     * The column <code>lesson.edu_course.original_price</code>. 原价
     */
    public final TableField<EduCourseRecord, BigDecimal> ORIGINAL_PRICE = createField(DSL.name("original_price"), SQLDataType.DECIMAL(10, 2), this, "原价");

    /**
     * The column <code>lesson.edu_course.duration</code>. 课程时长(分钟)
     */
    public final TableField<EduCourseRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER, this, "课程时长(分钟)");

    /**
     * The column <code>lesson.edu_course.total_lessons</code>. 总课时数
     */
    public final TableField<EduCourseRecord, Integer> TOTAL_LESSONS = createField(DSL.name("total_lessons"), SQLDataType.INTEGER, this, "总课时数");

    /**
     * The column <code>lesson.edu_course.level</code>. 难度等级：1-初级，2-中级，3-高级
     */
    public final TableField<EduCourseRecord, Byte> LEVEL = createField(DSL.name("level"), SQLDataType.TINYINT, this, "难度等级：1-初级，2-中级，3-高级");

    /**
     * The column <code>lesson.edu_course.status</code>. 状态：0-下架，1-上架
     */
    public final TableField<EduCourseRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-下架，1-上架");

    /**
     * The column <code>lesson.edu_course.created_at</code>. 创建时间
     */
    public final TableField<EduCourseRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_course.updated_at</code>. 更新时间
     */
    public final TableField<EduCourseRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_course.created_by</code>. 创建人ID
     */
    public final TableField<EduCourseRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_course.updated_by</code>. 更新人ID
     */
    public final TableField<EduCourseRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_course.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCourseRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduCourse(Name alias, Table<EduCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCourse(Name alias, Table<EduCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("课程表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_course</code> table reference
     */
    public EduCourse(String alias) {
        this(DSL.name(alias), EDU_COURSE);
    }

    /**
     * Create an aliased <code>lesson.edu_course</code> table reference
     */
    public EduCourse(Name alias) {
        this(alias, EDU_COURSE);
    }

    /**
     * Create a <code>lesson.edu_course</code> table reference
     */
    public EduCourse() {
        this(DSL.name("edu_course"), null);
    }

    public <O extends Record> EduCourse(Table<O> child, ForeignKey<O, EduCourseRecord> key) {
        super(child, key, EDU_COURSE);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COURSE_IDX_CAMPUS_ID, Indexes.EDU_COURSE_IDX_CATEGORY_ID, Indexes.EDU_COURSE_IDX_CREATED_AT, Indexes.EDU_COURSE_IDX_INSTITUTION_ID, Indexes.EDU_COURSE_IDX_NAME);
    }

    @Override
    public Identity<EduCourseRecord, Long> getIdentity() {
        return (Identity<EduCourseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCourseRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COURSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCourseRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCourseRecord>>asList(Keys.KEY_EDU_COURSE_PRIMARY, Keys.KEY_EDU_COURSE_UK_CODE);
    }

    @Override
    public EduCourse as(String alias) {
        return new EduCourse(DSL.name(alias), this);
    }

    @Override
    public EduCourse as(Name alias) {
        return new EduCourse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourse rename(String name) {
        return new EduCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourse rename(Name name) {
        return new EduCourse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, Long, Long, Long, String, String, String, String, String, String, BigDecimal, BigDecimal, Integer, Integer, Byte, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
