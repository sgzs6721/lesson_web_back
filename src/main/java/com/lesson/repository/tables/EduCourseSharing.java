/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.LessonProd;
import com.lesson.repository.tables.records.EduCourseSharingRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 课程共享表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCourseSharing extends TableImpl<EduCourseSharingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson_prod.edu_course_sharing</code>
     */
    public static final EduCourseSharing EDU_COURSE_SHARING = new EduCourseSharing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCourseSharingRecord> getRecordType() {
        return EduCourseSharingRecord.class;
    }

    /**
     * The column <code>lesson_prod.edu_course_sharing.id</code>. 记录ID
     */
    public final TableField<EduCourseSharingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "记录ID");

    /**
     * The column <code>lesson_prod.edu_course_sharing.student_id</code>. 学员ID
     */
    public final TableField<EduCourseSharingRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "学员ID");

    /**
     * The column <code>lesson_prod.edu_course_sharing.source_course_id</code>. 源课程ID（被共享的课程）
     */
    public final TableField<EduCourseSharingRecord, Long> SOURCE_COURSE_ID = createField(DSL.name("source_course_id"), SQLDataType.BIGINT.nullable(false), this, "源课程ID（被共享的课程）");

    /**
     * The column <code>lesson_prod.edu_course_sharing.target_course_id</code>. 目标课程ID（共享到的课程）
     */
    public final TableField<EduCourseSharingRecord, Long> TARGET_COURSE_ID = createField(DSL.name("target_course_id"), SQLDataType.BIGINT.nullable(false), this, "目标课程ID（共享到的课程）");

    /**
     * The column <code>lesson_prod.edu_course_sharing.coach_id</code>. 教练ID（共享课程的教练）
     */
    public final TableField<EduCourseSharingRecord, Long> COACH_ID = createField(DSL.name("coach_id"), SQLDataType.BIGINT, this, "教练ID（共享课程的教练）");

    /**
     * The column <code>lesson_prod.edu_course_sharing.shared_hours</code>. 共享课时数
     */
    public final TableField<EduCourseSharingRecord, BigDecimal> SHARED_HOURS = createField(DSL.name("shared_hours"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "共享课时数");

    /**
     * The column <code>lesson_prod.edu_course_sharing.status</code>. 状态：ACTIVE-有效，INACTIVE-无效，EXPIRED-已过期
     */
    public final TableField<EduCourseSharingRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)), this, "状态：ACTIVE-有效，INACTIVE-无效，EXPIRED-已过期");

    /**
     * The column <code>lesson_prod.edu_course_sharing.start_date</code>. 共享开始日期
     */
    public final TableField<EduCourseSharingRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "共享开始日期");

    /**
     * The column <code>lesson_prod.edu_course_sharing.end_date</code>. 共享结束日期（可选）
     */
    public final TableField<EduCourseSharingRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "共享结束日期（可选）");

    /**
     * The column <code>lesson_prod.edu_course_sharing.campus_id</code>. 校区ID
     */
    public final TableField<EduCourseSharingRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT.nullable(false), this, "校区ID");

    /**
     * The column <code>lesson_prod.edu_course_sharing.institution_id</code>. 机构ID
     */
    public final TableField<EduCourseSharingRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "机构ID");

    /**
     * The column <code>lesson_prod.edu_course_sharing.notes</code>. 备注信息
     */
    public final TableField<EduCourseSharingRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "备注信息");

    /**
     * The column <code>lesson_prod.edu_course_sharing.created_time</code>. 创建时间
     */
    public final TableField<EduCourseSharingRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson_prod.edu_course_sharing.update_time</code>. 更新时间
     */
    public final TableField<EduCourseSharingRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson_prod.edu_course_sharing.deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCourseSharingRecord, Integer> DELETED = createField(DSL.name("deleted"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "是否删除：0-未删除，1-已删除");

    private EduCourseSharing(Name alias, Table<EduCourseSharingRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCourseSharing(Name alias, Table<EduCourseSharingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("课程共享表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson_prod.edu_course_sharing</code> table reference
     */
    public EduCourseSharing(String alias) {
        this(DSL.name(alias), EDU_COURSE_SHARING);
    }

    /**
     * Create an aliased <code>lesson_prod.edu_course_sharing</code> table reference
     */
    public EduCourseSharing(Name alias) {
        this(alias, EDU_COURSE_SHARING);
    }

    /**
     * Create a <code>lesson_prod.edu_course_sharing</code> table reference
     */
    public EduCourseSharing() {
        this(DSL.name("edu_course_sharing"), null);
    }

    public <O extends Record> EduCourseSharing(Table<O> child, ForeignKey<O, EduCourseSharingRecord> key) {
        super(child, key, EDU_COURSE_SHARING);
    }

    @Override
    public Schema getSchema() {
        return LessonProd.LESSON_PROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COURSE_SHARING_IDX_CAMPUS_INSTITUTION, Indexes.EDU_COURSE_SHARING_IDX_COACH, Indexes.EDU_COURSE_SHARING_IDX_DELETED, Indexes.EDU_COURSE_SHARING_IDX_STATUS, Indexes.EDU_COURSE_SHARING_IDX_STUDENT_COURSE, Indexes.EDU_COURSE_SHARING_IDX_TARGET_COURSE);
    }

    @Override
    public Identity<EduCourseSharingRecord, Long> getIdentity() {
        return (Identity<EduCourseSharingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCourseSharingRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COURSE_SHARING_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCourseSharingRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCourseSharingRecord>>asList(Keys.KEY_EDU_COURSE_SHARING_PRIMARY);
    }

    @Override
    public EduCourseSharing as(String alias) {
        return new EduCourseSharing(DSL.name(alias), this);
    }

    @Override
    public EduCourseSharing as(Name alias) {
        return new EduCourseSharing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseSharing rename(String name) {
        return new EduCourseSharing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCourseSharing rename(Name name) {
        return new EduCourseSharing(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, Long, Long, Long, BigDecimal, String, LocalDate, LocalDate, Long, Long, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
