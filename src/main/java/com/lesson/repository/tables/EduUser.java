package com.lesson.repository.tables;

import com.lesson.repository.Keys;
import com.lesson.repository.tables.records.EduUserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduUser extends TableImpl<EduUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>edu_user</code>
     */
    public static final EduUser EDU_USER = new EduUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduUserRecord> getRecordType() {
        return EduUserRecord.class;
    }

    /**
     * The column <code>edu_user.id</code>.
     */
    public final TableField<EduUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>edu_user.username</code>.
     */
    public final TableField<EduUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>edu_user.password</code>.
     */
    public final TableField<EduUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>edu_user.real_name</code>.
     */
    public final TableField<EduUserRecord, String> REAL_NAME = createField(DSL.name("real_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>edu_user.phone</code>.
     */
    public final TableField<EduUserRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>edu_user.email</code>.
     */
    public final TableField<EduUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>edu_user.status</code>.
     */
    public final TableField<EduUserRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>edu_user.created_at</code>.
     */
    public final TableField<EduUserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private EduUser(Name alias, Table<EduUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduUser(Name alias, Table<EduUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>edu_user</code> table reference
     */
    public EduUser(String alias) {
        this(DSL.name(alias), EDU_USER);
    }

    /**
     * Create an aliased <code>edu_user</code> table reference
     */
    public EduUser(Name alias) {
        this(alias, EDU_USER);
    }

    /**
     * Create a <code>edu_user</code> table reference
     */
    public EduUser() {
        this(DSL.name("edu_user"), null);
    }

    @Override
    public Schema getSchema() {
        return null;
    }

    @Override
    public Identity<EduUserRecord, Long> getIdentity() {
        return (Identity<EduUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduUserRecord> getPrimaryKey() {
        return Keys.KEY_EDU_USER_PRIMARY;
    }

    @Override
    public EduUser as(String alias) {
        return new EduUser(DSL.name(alias), this);
    }

    @Override
    public EduUser as(Name alias) {
        return new EduUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduUser rename(String name) {
        return new EduUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduUser rename(Name name) {
        return new EduUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, String, Byte, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
} 