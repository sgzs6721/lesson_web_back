/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduInstitutionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 教育机构表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduInstitution extends TableImpl<EduInstitutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_institution</code>
     */
    public static final EduInstitution EDU_INSTITUTION = new EduInstitution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduInstitutionRecord> getRecordType() {
        return EduInstitutionRecord.class;
    }

    /**
     * The column <code>lesson.edu_institution.id</code>. 主键ID
     */
    public final TableField<EduInstitutionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_institution.name</code>. 机构名称
     */
    public final TableField<EduInstitutionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "机构名称");

    /**
     * The column <code>lesson.edu_institution.code</code>. 机构编码
     */
    public final TableField<EduInstitutionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "机构编码");

    /**
     * The column <code>lesson.edu_institution.logo</code>. 机构logo
     */
    public final TableField<EduInstitutionRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.VARCHAR(255), this, "机构logo");

    /**
     * The column <code>lesson.edu_institution.address</code>. 机构地址
     */
    public final TableField<EduInstitutionRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "机构地址");

    /**
     * The column <code>lesson.edu_institution.contact_name</code>. 联系人姓名
     */
    public final TableField<EduInstitutionRecord, String> CONTACT_NAME = createField(DSL.name("contact_name"), SQLDataType.VARCHAR(50), this, "联系人姓名");

    /**
     * The column <code>lesson.edu_institution.contact_phone</code>. 联系人电话
     */
    public final TableField<EduInstitutionRecord, String> CONTACT_PHONE = createField(DSL.name("contact_phone"), SQLDataType.VARCHAR(20), this, "联系人电话");

    /**
     * The column <code>lesson.edu_institution.contact_email</code>. 联系人邮箱
     */
    public final TableField<EduInstitutionRecord, String> CONTACT_EMAIL = createField(DSL.name("contact_email"), SQLDataType.VARCHAR(100), this, "联系人邮箱");

    /**
     * The column <code>lesson.edu_institution.description</code>. 机构描述
     */
    public final TableField<EduInstitutionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "机构描述");

    /**
     * The column <code>lesson.edu_institution.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduInstitutionRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_institution.created_at</code>. 创建时间
     */
    public final TableField<EduInstitutionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_institution.updated_at</code>. 更新时间
     */
    public final TableField<EduInstitutionRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_institution.created_by</code>. 创建人ID
     */
    public final TableField<EduInstitutionRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_institution.updated_by</code>. 更新人ID
     */
    public final TableField<EduInstitutionRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_institution.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduInstitutionRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduInstitution(Name alias, Table<EduInstitutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduInstitution(Name alias, Table<EduInstitutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("教育机构表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_institution</code> table reference
     */
    public EduInstitution(String alias) {
        this(DSL.name(alias), EDU_INSTITUTION);
    }

    /**
     * Create an aliased <code>lesson.edu_institution</code> table reference
     */
    public EduInstitution(Name alias) {
        this(alias, EDU_INSTITUTION);
    }

    /**
     * Create a <code>lesson.edu_institution</code> table reference
     */
    public EduInstitution() {
        this(DSL.name("edu_institution"), null);
    }

    public <O extends Record> EduInstitution(Table<O> child, ForeignKey<O, EduInstitutionRecord> key) {
        super(child, key, EDU_INSTITUTION);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_INSTITUTION_IDX_CREATED_AT, Indexes.EDU_INSTITUTION_IDX_NAME);
    }

    @Override
    public Identity<EduInstitutionRecord, Long> getIdentity() {
        return (Identity<EduInstitutionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduInstitutionRecord> getPrimaryKey() {
        return Keys.KEY_EDU_INSTITUTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduInstitutionRecord>> getKeys() {
        return Arrays.<UniqueKey<EduInstitutionRecord>>asList(Keys.KEY_EDU_INSTITUTION_PRIMARY, Keys.KEY_EDU_INSTITUTION_UK_CODE);
    }

    @Override
    public EduInstitution as(String alias) {
        return new EduInstitution(DSL.name(alias), this);
    }

    @Override
    public EduInstitution as(Name alias) {
        return new EduInstitution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduInstitution rename(String name) {
        return new EduInstitution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduInstitution rename(Name name) {
        return new EduInstitution(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, String, String, String, String, String, String, String, String, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
