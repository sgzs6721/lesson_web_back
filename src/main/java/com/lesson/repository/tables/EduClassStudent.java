/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduClassStudentRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 班级学生关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduClassStudent extends TableImpl<EduClassStudentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_class_student</code>
     */
    public static final EduClassStudent EDU_CLASS_STUDENT = new EduClassStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduClassStudentRecord> getRecordType() {
        return EduClassStudentRecord.class;
    }

    /**
     * The column <code>lesson.edu_class_student.id</code>. 主键ID
     */
    public final TableField<EduClassStudentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_class_student.class_id</code>. 班级ID
     */
    public final TableField<EduClassStudentRecord, Long> CLASS_ID = createField(DSL.name("class_id"), SQLDataType.BIGINT.nullable(false), this, "班级ID");

    /**
     * The column <code>lesson.edu_class_student.student_id</code>. 学生ID
     */
    public final TableField<EduClassStudentRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "学生ID");

    /**
     * The column <code>lesson.edu_class_student.join_date</code>. 加入日期
     */
    public final TableField<EduClassStudentRecord, LocalDate> JOIN_DATE = createField(DSL.name("join_date"), SQLDataType.LOCALDATE.nullable(false), this, "加入日期");

    /**
     * The column <code>lesson.edu_class_student.leave_date</code>. 离开日期
     */
    public final TableField<EduClassStudentRecord, LocalDate> LEAVE_DATE = createField(DSL.name("leave_date"), SQLDataType.LOCALDATE, this, "离开日期");

    /**
     * The column <code>lesson.edu_class_student.status</code>. 状态：0-已离开，1-在读
     */
    public final TableField<EduClassStudentRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-已离开，1-在读");

    /**
     * The column <code>lesson.edu_class_student.created_at</code>. 创建时间
     */
    public final TableField<EduClassStudentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_class_student.updated_at</code>. 更新时间
     */
    public final TableField<EduClassStudentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_class_student.created_by</code>. 创建人ID
     */
    public final TableField<EduClassStudentRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_class_student.updated_by</code>. 更新人ID
     */
    public final TableField<EduClassStudentRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_class_student.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduClassStudentRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduClassStudent(Name alias, Table<EduClassStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduClassStudent(Name alias, Table<EduClassStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("班级学生关联表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_class_student</code> table reference
     */
    public EduClassStudent(String alias) {
        this(DSL.name(alias), EDU_CLASS_STUDENT);
    }

    /**
     * Create an aliased <code>lesson.edu_class_student</code> table reference
     */
    public EduClassStudent(Name alias) {
        this(alias, EDU_CLASS_STUDENT);
    }

    /**
     * Create a <code>lesson.edu_class_student</code> table reference
     */
    public EduClassStudent() {
        this(DSL.name("edu_class_student"), null);
    }

    public <O extends Record> EduClassStudent(Table<O> child, ForeignKey<O, EduClassStudentRecord> key) {
        super(child, key, EDU_CLASS_STUDENT);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_CLASS_STUDENT_IDX_CLASS_ID, Indexes.EDU_CLASS_STUDENT_IDX_CREATED_AT, Indexes.EDU_CLASS_STUDENT_IDX_STUDENT_ID);
    }

    @Override
    public Identity<EduClassStudentRecord, Long> getIdentity() {
        return (Identity<EduClassStudentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduClassStudentRecord> getPrimaryKey() {
        return Keys.KEY_EDU_CLASS_STUDENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduClassStudentRecord>> getKeys() {
        return Arrays.<UniqueKey<EduClassStudentRecord>>asList(Keys.KEY_EDU_CLASS_STUDENT_PRIMARY, Keys.KEY_EDU_CLASS_STUDENT_UK_CLASS_STUDENT);
    }

    @Override
    public EduClassStudent as(String alias) {
        return new EduClassStudent(DSL.name(alias), this);
    }

    @Override
    public EduClassStudent as(Name alias) {
        return new EduClassStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClassStudent rename(String name) {
        return new EduClassStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClassStudent rename(Name name) {
        return new EduClassStudent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, LocalDate, LocalDate, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
