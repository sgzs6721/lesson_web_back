/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduCoachRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 教练表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduCoach extends TableImpl<EduCoachRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_coach</code>
     */
    public static final EduCoach EDU_COACH = new EduCoach();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduCoachRecord> getRecordType() {
        return EduCoachRecord.class;
    }

    /**
     * The column <code>lesson.edu_coach.id</code>. 主键ID
     */
    public final TableField<EduCoachRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_coach.institution_id</code>. 所属机构ID
     */
    public final TableField<EduCoachRecord, Long> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.BIGINT.nullable(false), this, "所属机构ID");

    /**
     * The column <code>lesson.edu_coach.campus_id</code>. 所属校区ID
     */
    public final TableField<EduCoachRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT, this, "所属校区ID");

    /**
     * The column <code>lesson.edu_coach.user_id</code>. 关联用户ID
     */
    public final TableField<EduCoachRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "关联用户ID");

    /**
     * The column <code>lesson.edu_coach.name</code>. 教练姓名
     */
    public final TableField<EduCoachRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "教练姓名");

    /**
     * The column <code>lesson.edu_coach.code</code>. 教练编码
     */
    public final TableField<EduCoachRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "教练编码");

    /**
     * The column <code>lesson.edu_coach.gender</code>. 性别：0-未知，1-男，2-女
     */
    public final TableField<EduCoachRecord, Byte> GENDER = createField(DSL.name("gender"), SQLDataType.TINYINT, this, "性别：0-未知，1-男，2-女");

    /**
     * The column <code>lesson.edu_coach.birthday</code>. 出生日期
     */
    public final TableField<EduCoachRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "出生日期");

    /**
     * The column <code>lesson.edu_coach.id_card</code>. 身份证号
     */
    public final TableField<EduCoachRecord, String> ID_CARD = createField(DSL.name("id_card"), SQLDataType.VARCHAR(18), this, "身份证号");

    /**
     * The column <code>lesson.edu_coach.phone</code>. 手机号
     */
    public final TableField<EduCoachRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), this, "手机号");

    /**
     * The column <code>lesson.edu_coach.email</code>. 邮箱
     */
    public final TableField<EduCoachRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "邮箱");

    /**
     * The column <code>lesson.edu_coach.avatar</code>. 头像URL
     */
    public final TableField<EduCoachRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "头像URL");

    /**
     * The column <code>lesson.edu_coach.education</code>. 学历
     */
    public final TableField<EduCoachRecord, String> EDUCATION = createField(DSL.name("education"), SQLDataType.VARCHAR(50), this, "学历");

    /**
     * The column <code>lesson.edu_coach.specialty</code>. 专长
     */
    public final TableField<EduCoachRecord, String> SPECIALTY = createField(DSL.name("specialty"), SQLDataType.VARCHAR(255), this, "专长");

    /**
     * The column <code>lesson.edu_coach.introduction</code>. 个人介绍
     */
    public final TableField<EduCoachRecord, String> INTRODUCTION = createField(DSL.name("introduction"), SQLDataType.CLOB, this, "个人介绍");

    /**
     * The column <code>lesson.edu_coach.entry_date</code>. 入职日期
     */
    public final TableField<EduCoachRecord, LocalDate> ENTRY_DATE = createField(DSL.name("entry_date"), SQLDataType.LOCALDATE, this, "入职日期");

    /**
     * The column <code>lesson.edu_coach.leave_date</code>. 离职日期
     */
    public final TableField<EduCoachRecord, LocalDate> LEAVE_DATE = createField(DSL.name("leave_date"), SQLDataType.LOCALDATE, this, "离职日期");

    /**
     * The column <code>lesson.edu_coach.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduCoachRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_coach.created_at</code>. 创建时间
     */
    public final TableField<EduCoachRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_coach.updated_at</code>. 更新时间
     */
    public final TableField<EduCoachRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_coach.created_by</code>. 创建人ID
     */
    public final TableField<EduCoachRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_coach.updated_by</code>. 更新人ID
     */
    public final TableField<EduCoachRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_coach.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduCoachRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduCoach(Name alias, Table<EduCoachRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduCoach(Name alias, Table<EduCoachRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("教练表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_coach</code> table reference
     */
    public EduCoach(String alias) {
        this(DSL.name(alias), EDU_COACH);
    }

    /**
     * Create an aliased <code>lesson.edu_coach</code> table reference
     */
    public EduCoach(Name alias) {
        this(alias, EDU_COACH);
    }

    /**
     * Create a <code>lesson.edu_coach</code> table reference
     */
    public EduCoach() {
        this(DSL.name("edu_coach"), null);
    }

    public <O extends Record> EduCoach(Table<O> child, ForeignKey<O, EduCoachRecord> key) {
        super(child, key, EDU_COACH);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_COACH_IDX_CAMPUS_ID, Indexes.EDU_COACH_IDX_CREATED_AT, Indexes.EDU_COACH_IDX_INSTITUTION_ID, Indexes.EDU_COACH_IDX_NAME, Indexes.EDU_COACH_IDX_PHONE, Indexes.EDU_COACH_IDX_USER_ID);
    }

    @Override
    public Identity<EduCoachRecord, Long> getIdentity() {
        return (Identity<EduCoachRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduCoachRecord> getPrimaryKey() {
        return Keys.KEY_EDU_COACH_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduCoachRecord>> getKeys() {
        return Arrays.<UniqueKey<EduCoachRecord>>asList(Keys.KEY_EDU_COACH_PRIMARY, Keys.KEY_EDU_COACH_UK_CODE);
    }

    @Override
    public EduCoach as(String alias) {
        return new EduCoach(DSL.name(alias), this);
    }

    @Override
    public EduCoach as(Name alias) {
        return new EduCoach(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCoach rename(String name) {
        return new EduCoach(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduCoach rename(Name name) {
        return new EduCoach(name, null);
    }
}
