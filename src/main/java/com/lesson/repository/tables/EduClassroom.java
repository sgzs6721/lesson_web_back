/*
 * This file is generated by jOOQ.
 */
package com.lesson.repository.tables;


import com.lesson.repository.Indexes;
import com.lesson.repository.Keys;
import com.lesson.repository.Lesson;
import com.lesson.repository.tables.records.EduClassroomRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 教室表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EduClassroom extends TableImpl<EduClassroomRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson.edu_classroom</code>
     */
    public static final EduClassroom EDU_CLASSROOM = new EduClassroom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EduClassroomRecord> getRecordType() {
        return EduClassroomRecord.class;
    }

    /**
     * The column <code>lesson.edu_classroom.id</code>. 主键ID
     */
    public final TableField<EduClassroomRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>lesson.edu_classroom.campus_id</code>. 所属校区ID
     */
    public final TableField<EduClassroomRecord, Long> CAMPUS_ID = createField(DSL.name("campus_id"), SQLDataType.BIGINT.nullable(false), this, "所属校区ID");

    /**
     * The column <code>lesson.edu_classroom.name</code>. 教室名称
     */
    public final TableField<EduClassroomRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "教室名称");

    /**
     * The column <code>lesson.edu_classroom.code</code>. 教室编码
     */
    public final TableField<EduClassroomRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "教室编码");

    /**
     * The column <code>lesson.edu_classroom.capacity</code>. 容纳人数
     */
    public final TableField<EduClassroomRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER, this, "容纳人数");

    /**
     * The column <code>lesson.edu_classroom.area</code>. 面积(平方米)
     */
    public final TableField<EduClassroomRecord, BigDecimal> AREA = createField(DSL.name("area"), SQLDataType.DECIMAL(10, 2), this, "面积(平方米)");

    /**
     * The column <code>lesson.edu_classroom.equipment</code>. 设备信息
     */
    public final TableField<EduClassroomRecord, String> EQUIPMENT = createField(DSL.name("equipment"), SQLDataType.VARCHAR(255), this, "设备信息");

    /**
     * The column <code>lesson.edu_classroom.description</code>. 描述
     */
    public final TableField<EduClassroomRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "描述");

    /**
     * The column <code>lesson.edu_classroom.status</code>. 状态：0-禁用，1-启用
     */
    public final TableField<EduClassroomRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "状态：0-禁用，1-启用");

    /**
     * The column <code>lesson.edu_classroom.created_at</code>. 创建时间
     */
    public final TableField<EduClassroomRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>lesson.edu_classroom.updated_at</code>. 更新时间
     */
    public final TableField<EduClassroomRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>lesson.edu_classroom.created_by</code>. 创建人ID
     */
    public final TableField<EduClassroomRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "创建人ID");

    /**
     * The column <code>lesson.edu_classroom.updated_by</code>. 更新人ID
     */
    public final TableField<EduClassroomRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "更新人ID");

    /**
     * The column <code>lesson.edu_classroom.is_deleted</code>. 是否删除：0-未删除，1-已删除
     */
    public final TableField<EduClassroomRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除：0-未删除，1-已删除");

    private EduClassroom(Name alias, Table<EduClassroomRecord> aliased) {
        this(alias, aliased, null);
    }

    private EduClassroom(Name alias, Table<EduClassroomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("教室表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>lesson.edu_classroom</code> table reference
     */
    public EduClassroom(String alias) {
        this(DSL.name(alias), EDU_CLASSROOM);
    }

    /**
     * Create an aliased <code>lesson.edu_classroom</code> table reference
     */
    public EduClassroom(Name alias) {
        this(alias, EDU_CLASSROOM);
    }

    /**
     * Create a <code>lesson.edu_classroom</code> table reference
     */
    public EduClassroom() {
        this(DSL.name("edu_classroom"), null);
    }

    public <O extends Record> EduClassroom(Table<O> child, ForeignKey<O, EduClassroomRecord> key) {
        super(child, key, EDU_CLASSROOM);
    }

    @Override
    public Schema getSchema() {
        return Lesson.LESSON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDU_CLASSROOM_IDX_CAMPUS_ID, Indexes.EDU_CLASSROOM_IDX_CREATED_AT, Indexes.EDU_CLASSROOM_IDX_NAME);
    }

    @Override
    public Identity<EduClassroomRecord, Long> getIdentity() {
        return (Identity<EduClassroomRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EduClassroomRecord> getPrimaryKey() {
        return Keys.KEY_EDU_CLASSROOM_PRIMARY;
    }

    @Override
    public List<UniqueKey<EduClassroomRecord>> getKeys() {
        return Arrays.<UniqueKey<EduClassroomRecord>>asList(Keys.KEY_EDU_CLASSROOM_PRIMARY, Keys.KEY_EDU_CLASSROOM_UK_CODE);
    }

    @Override
    public EduClassroom as(String alias) {
        return new EduClassroom(DSL.name(alias), this);
    }

    @Override
    public EduClassroom as(Name alias) {
        return new EduClassroom(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClassroom rename(String name) {
        return new EduClassroom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EduClassroom rename(Name name) {
        return new EduClassroom(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, String, String, Integer, BigDecimal, String, String, Byte, LocalDateTime, LocalDateTime, Long, Long, Byte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
